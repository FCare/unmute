# See NOTE comments for places to modify.
services:
  traefik:
    image: traefik:v3.3.1
    restart: unless-stopped
    command:
      # Swarm provider configuration
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"

      # HTTP and HTTPS entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  frontend:
    image: unmute-frontend:latest
    restart: unless-stopped
    build:
      context: frontend/
      dockerfile: hot-reloading.Dockerfile
    volumes:
      - ./frontend/src:/app/src
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.routers.frontend.entrypoints=web,websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      - "traefik.http.routers.frontend.priority=10" # lowest priority

  backend:
    image: unmute-backend:latest
    restart: unless-stopped
    build:
      context: ./
      target: hot-reloading
    volumes:
      - ./unmute:/app/unmute
    environment:
      - KYUTAI_STT_URL=ws://stt:8080
      - KYUTAI_TTS_URL=ws://tts:8080
      - KYUTAI_LLM_URL=http://llm:11434
      - KYUTAI_LLM_MODEL=llama3.2:3b
      - KYUTAI_LLM_API_KEY=ollama
      - NEWSAPI_API_KEY=$NEWSAPI_API_KEY
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.backend.middlewares=strip-api"
      - "traefik.http.middlewares.strip-api.replacepathregex.regex=^/api/(.*)"
      - "traefik.http.middlewares.strip-api.replacepathregex.replacement=/$$1"
      - "traefik.http.routers.backend.entrypoints=web,websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.services.backend.loadbalancer.server.port=80"
      - "traefik.http.routers.backend.priority=100" # higher priority than frontend
      - "prometheus-port=80"

  tts:
    image: moshi-server:latest
    restart: unless-stopped
    command: ["worker", "--config", "configs/tts.toml"]
    build:
      context: services/moshi-server
      dockerfile: public.Dockerfile
    environment:
      - HUGGING_FACE_HUB_TOKEN=$HUGGING_FACE_HUB_TOKEN
      - CUDA_COMPUTE_CAP=120
    volumes:
      - ./volumes/cargo-registry-tts:/root/.cargo/registry
      - ./volumes/tts-target:/app/target
      - ./volumes/uv-cache:/root/.cache/uv
      - /tmp/models/:/models
      - ./volumes/tts-logs:/logs
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['${TTS_GPU_DEVICE:-0}']
              capabilities: [gpu]

  stt:
    image: moshi-server:latest
    restart: unless-stopped
    command: ["worker", "--config", "configs/stt.toml"]
    build:
      context: services/moshi-server
      dockerfile: public.Dockerfile
    environment:
      - HUGGING_FACE_HUB_TOKEN=$HUGGING_FACE_HUB_TOKEN
    volumes:
      - ./volumes/cargo-registry-stt:/root/.cargo/registry
      - ./volumes/stt-target:/app/target
      - ./volumes/uv-cache:/root/.cache/uv
      - /tmp/models/:/models
      - ./volumes/stt-logs:/logs
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['${STT_GPU_DEVICE:-0}']
              capabilities: [gpu]

  llm:
    restart: unless-stopped
    build:
      context: services/ollama
      dockerfile: Dockerfile
      args:
        MODEL_NAME: ${KYUTAI_LLM_MODEL:-llama3.2:3b}
    volumes:
      - ./volumes/ollama:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0:11434
    ports:
      - "11434:11434"  # Port 11434 externe et interne (default Ollama port)
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['${LLM_GPU_DEVICE:-0}']
              capabilities: [gpu]

networks:
  default:
